#Define Project
substitutions:
  name: apollo-air-1
  version: "24.1.4.1"
  device_description: ${name} made by Apollo Automation - version ${version}.

esphome:
  name: "${name}"
  friendly_name: Apollo AIR-1
  comment: Apollo AIR-1
  name_add_mac_suffix: true
  platformio_options:
    board_build.flash_mode: dio

  project:
    name: "ApolloAutomation.AIR-1"
    version: "${version}"

  min_version: 2023.11.1

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

dashboard_import:
  package_import_url: github://ApolloAutomation/AIR-1/Integrations/ESPHome/AIR-1.yaml
  import_full_config: false

globals:
  - id: cpu_speed
    type: int
    restore_value: no
    initial_value: "0"
  - id: cycleCounter
    type: int
    restore_value: no
    initial_value: '0'

# Enable Home Assistant API
api:
  on_client_connected:
    - delay: 1s
    - light.turn_off: rgb_light
    - lambda: 'id(cycleCounter) = 30;'
  services:
    #Co2 Calibration Service
    - service: calibrate_co2_value
      variables:
        co2_ppm: float
      then:
        - scd4x.perform_forced_calibration:
            value: !lambda "return co2_ppm;"
            id: scd40
    - service: sen55_clean
      then:
        - sen5x.start_fan_autoclean: sen55

logger:
  logs:
    component: ERROR

ota:
  password: "apolloautomation"
  safe_mode: false

wifi:
  on_connect:
    - delay: 5s # Gives time for improv results to be transmitted
    - ble.disable:
  on_disconnect:
    - ble.enable:
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Apollo AIR1 Hotspot"

captive_portal:

improv_serial:

# ESPHome notes that the Web Server Component will take up a lot of memory and potentially
# decrease stability. Because the configurations available via the web server are also available
# via the device page in HA, leaving this disabled seems like a prudent option unless you have a
# specific use case that demands it.
# web_server:
#   port: 80

esp32_improv:
  authorizer: none

i2c:
  sda: GPIO1
  scl: GPIO0
  id: bus_a

number:
  - platform: template
    name: SEN55 Temperature Offset
    id: sen55_temperature_offset
    restore_value: true
    initial_value: 6.0
    min_value: -70.0
    max_value: 70.0
    entity_category: "CONFIG"
    unit_of_measurement: "°C"
    optimistic: true
    update_interval: never
    step: 0.1
    mode: box

  - platform: template
    name: SEN55 Humidity Offset
    id: sen55_humidity_offset
    restore_value: true
    initial_value: 0
    min_value: -70.0
    max_value: 70.0
    entity_category: "CONFIG"
    unit_of_measurement: "°C"
    optimistic: true
    update_interval: never
    step: 0.1
    mode: box

  # Currently unused in preparation for the ability to update the internal temperature compensation
  # offset/slope as described in the sen5x datasheets.
  # More info: https://sensirion.com/media/documents/9B9DE2A7/61E957EB/Sensirion_Temperature_Acceleration_and_Compensation_Instructions_SEN.pdf
  - platform: template
    name: SEN55 Internal Temperature Compensation
    id: sen55_temperature_compensation
    restore_value: true
    initial_value: 0.0
    min_value: -20.0
    max_value: 20.0
    entity_category: "CONFIG"
    unit_of_measurement: "°C"
    optimistic: true
    update_interval: never
    step: 0.1
    mode: box

binary_sensor:
  - platform: status
    name: Online
    id: ink_ha_connected

sensor:
  - platform: template
    name: "ESP CPU Speed"
    id: esp_cpu_speed
    accuracy_decimals: 0
    unit_of_measurement: Mhz
    lambda: return ESP.getCpuFreqMHz();
    entity_category: "diagnostic"

  - platform: internal_temperature
    name: "ESP Temperature"
    id: sys_esp_temperature
    update_interval: 30s
    force_update: True

  - platform: uptime
    name: Uptime
    id: sys_uptime
    update_interval: 60s

  - platform: template
    id: esp_memory
    icon: mdi:memory
    name: ESP Free Memory
    lambda: return heap_caps_get_free_size(MALLOC_CAP_INTERNAL) / 1024;
    unit_of_measurement: "kB"
    state_class: measurement
    entity_category: "diagnostic"

  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dBm
    name: "RSSI"
    id: wifi_signal_db
    force_update: True
    update_interval: 60s
    entity_category: "diagnostic"

  # 'platform: copy' is used here because two sensors can't normally share the same source_id
  # https://esphome.io/components/sensor/wifi_signal.html
  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "WiFi Signal Strength"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"
    device_class: ""

  - platform: scd4x
    id: scd40
    co2:
      name: "CO2"
      id: "co2"
      force_update: True
    automatic_self_calibration: false
    update_interval: 60s
    measurement_mode: "periodic"
    i2c_id: bus_a
    ambient_pressure_compensation_source: dps310pressure

  - platform: dps310
    id: dps_310
    pressure:
      name: "DPS310 Pressure"
      id: dps310pressure
    temperature:
      id: dps310temperature
    update_interval: 30s
    i2c_id: bus_a

  - platform: sen5x
    id: sen55
    pm_1_0:
      name: "PM <1µm Weight concentration"
      id: pm_1_0
      accuracy_decimals: 1
    pm_2_5:
      name: "PM <2.5µm Weight concentration"
      id: pm_2_5
      accuracy_decimals: 1
    pm_4_0:
      name: "PM <4µm Weight concentration"
      id: pm_4_0
      accuracy_decimals: 1
    pm_10_0:
      name: "PM <10µm Weight concentration"
      id: pm_10_0
      accuracy_decimals: 1
    temperature:
      name: "SEN55 Temperature"
      accuracy_decimals: 1
      filters:
        - lambda: return x - id(sen55_temperature_offset).state;
      force_update: True
    humidity:
      name: "SEN55 Humidity"
      filters:
        - lambda: return x - id(sen55_humidity_offset).state;
      accuracy_decimals: 0
      force_update: True
    voc:
      name: "SEN55 VOC"
      id: sen55_voc
      algorithm_tuning:
        index_offset: 100
        learning_time_offset_hours: 12
        learning_time_gain_hours: 12
        gating_max_duration_minutes: 180
        std_initial: 50
        gain_factor: 230
      force_update: True
    nox:
      name: "SEN55 NOX"
      force_update: True
    # Changes the SEN55's internal temperature compensation algorithm, used for offsetting the
    # effects of other local heat sources. Because the SEN55 is an all-in-one solution with many
    # different sensors, the calibrations it performs for RH/VOC/NOx/PM are all affected by its
    # own temperaturue sensor. Each SEN55 is calibrated by the factory in an open airflow setting
    # on a wooden table, but these compensation values can be used by end usuers to adjust the
    # factory compensation settings to suit their own environment and use case.
    # More info:
    # - https://esphome.io/components/sensor/sen5x.html#configuration-variables
    # - https://sensirion.com/media/documents/9B9DE2A7/61E957EB/Sensirion_Temperature_Acceleration_and_Compensation_Instructions_SEN.pdf
    temperature_compensation:
      offset: 0.0
      normalized_offset_slope: 0
      time_constant: 0
    # Acceleration Modes
    # "The SEN5x comes with 3 different presets for the Sensirion temperature acceleration routine
    # (STAR). In the default case a minor acceleration is applied. This setting works well for a
    # standalone module such as for application in air purifiers. In the application of air quality
    # monitors or mobile devices we recommend choosing between settings 1 and 2 for high and medium
    # acceleration of the temperature measurement."
    # In ESPHome's sen5x module, these values correspond to:
    # 0 = low, 1 = medium, 2 = high
    acceleration_mode: medium
    store_baseline: true
    address: 0x69
    update_interval: 10s

  - platform: template
    name: "PM 0.3 To 1 µm"
    id: pm0_3_to_1
    disabled_by_default: true
    lambda: return id(pm_1_0).state;
    unit_of_measurement: "µg/m³"
    state_class: measurement
    icon: mdi:air-filter
    update_interval: 10s

  - platform: template
    name: "PM 1 To 2.5 µm"
    id: pm1_to_2_5
    disabled_by_default: true
    lambda: return id(pm_2_5).state - id(pm_1_0).state;
    unit_of_measurement: "µg/m³"
    state_class: measurement
    icon: mdi:air-filter
    update_interval: 10s

  - platform: template
    name: "PM 2.5 To 4 µm"
    id: pm2_5_to_4
    disabled_by_default: true
    lambda: return id(pm_4_0).state - id(pm_2_5).state;
    unit_of_measurement: "µg/m³"
    state_class: measurement
    icon: mdi:air-filter
    update_interval: 10s

  - platform: template
    name: "PM 4 To 10 µm"
    id: pm4_to_10
    disabled_by_default: true
    lambda: return id(pm_10_0).state - id(pm_4_0).state;
    unit_of_measurement: "µg/m³"
    icon: mdi:air-filter
    update_interval: 10s

  - platform: mics_4514
    id: mics4514
    # Testing i2c and address config options added based on discussion in Issue #4268
    # https://github.com/esphome/issues/issues/4268 ("mics_4514 not reporting data")
    i2c_id: bus_a
    address: 0x75
    nitrogen_dioxide:
      name: Nitrogen Dioxide
      force_update: True
    carbon_monoxide:
      name: Carbon Monoxide
      force_update: True
    hydrogen:
      name: Hydrogen
      force_update: True
    ethanol:
      name: Ethanol
      force_update: True
    methane:
      name: Methane
      force_update: True
    ammonia:
      name: Ammonia
      force_update: True
    update_interval: 60s

light:
  - platform: esp32_rmt_led_strip
    id: rgb_light
    name: "RGB Light"
    pin: GPIO3
    rmt_channel: 0
    default_transition_length: 0s
    chipset: WS2812
    num_leds: 3
    rgb_order: grb
    effects:
      - pulse:
          name: "Slow Pulse"
          transition_length: 250ms
          update_interval: 250ms
          min_brightness: 50%
          max_brightness: 100%
      - pulse:
          name: "Fast Pulse"
          transition_length: 100ms
          update_interval: 100ms
          min_brightness: 50%
          max_brightness: 100%

time:
  - platform: sntp
    id: time_sntp

button:
  - platform: restart
    icon: mdi:power-cycle
    name: "ESP Reboot"

  - platform: factory_reset
    disabled_by_default: True
    name: "Factory Reset ESP"
    id: factory_reset_all

  - platform: template
    name: "Calibrate SCD40 To 400ppm"
    id: set_SCD40_calibrate
    on_press:
      - scd4x.perform_forced_calibration:
          value: 400
          id: scd40

  - platform: template
    name: "Clean SEN55"
    id: clean_sen55
    on_press:
      - sen5x.start_fan_autoclean: sen55

text_sensor:
  # Convert VOC Index To Text:
  # https://sensirion.com/media/documents/02232963/6294E043/Info_Note_VOC_Index.pdf
  - platform: template
    name: "VOC Quality"
    id: voc_quality
    icon: mdi:air-filter
    lambda: |-
      if (id(sen55_voc).state < 80) {
        return std::string("Improved");}
      else if (id(sen55_voc).state < 120) {
        return std::string("Normal");}
      else if (id(sen55_voc).state < 200) {
        return std::string("Abnormal");}
      else if (id(sen55_voc).state < 300) {
        return std::string("Very abnormal");}
      else {
        return std::string("Extremely abnormal");}

switch:
 - platform: template
   name: "Startup Light Blink"
   id: startup_light_blink
   icon: mdi:lightbulb
   restore_mode: RESTORE_DEFAULT_ON
   optimistic: true
   entity_category: "config"

#Used To Control RGB Light On Startup. Tells User Status Of Device
interval:
  - interval: 1s
    then:
      - if:
          condition:
            - binary_sensor.is_off: ink_ha_connected
            - lambda: 'return id(cycleCounter) < 30;'
            - switch.is_on: startup_light_blink

          then:
            - light.toggle:
                id: rgb_light
            - lambda: 'id(cycleCounter) += 1;'

  - interval: 1s
    then:
      - if:
          condition:
            - binary_sensor.is_off: ink_ha_connected
            - lambda: 'return id(cycleCounter) > 30;'
            - lambda: 'return id(cycleCounter) < 31;'
            - switch.is_on: startup_light_blink

          then:
            - light.turn_off:
                id: rgb_light
            - lambda: 'id(cycleCounter) += 1;'
